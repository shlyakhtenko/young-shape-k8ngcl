{"version":3,"file":"static/js/837.aa21de78.chunk.js","mappings":"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","sources":["pipeline_editor/column_helpers.js","pipeline_editor/Datacolumn.js","pipeline_editor/PipelineEditor.js"],"sourcesContent":["export function compute_inputs(query) {\n  //console.log(\"compute inputs: query::\", query.fields);\n  let xyz = {\n    name: \"inputs\",\n    caption: \"Input Column\",\n    query: query.name,\n    fields: Object.entries(query.fields).map(([name, d]) => {\n      return {\n        name: name,\n        caption: d.caption,\n        editable: d.editable,\n        primary_key: d.primary_key,\n        edit_type: d.edit_type,\n        edit: false,\n        criteria: [[]],\n        display_on_card: null,\n        type: d.type,\n      };\n    }),\n  };\n  //console.log(xyz);\n  return [xyz];\n}\n\nexport function compute_wips(query, column_name, column_caption) {\n  let xyz = {\n    name: column_name,\n    caption: column_caption,\n    query: query.name,\n    fields: Object.entries(query.fields).map(([name, d]) => {\n      return {\n        name: name,\n        caption: d.caption,\n        editable: d.editable,\n        edit: false,\n        criteria: [[]],\n        type: d.type,\n        display_on_card: true,\n      };\n    }),\n  };\n  return xyz;\n}\nexport function compute_outputs(query, wips, column_name, column_caption) {\n  let wip_fields = [\n    ...new Set(\n      wips\n        .map((w) => {\n          return w.fields;\n        })\n        .flat()\n        .filter((f) => {\n          return f.edit;\n        }),\n    ),\n  ].map((ff) => {\n    return ff.name;\n  });\n  console.log(\"compute_output: wip_fields = \", wip_fields, \"query=\", query);\n\n  let xyz = {\n    name: column_name,\n    caption: column_caption,\n    query: query.name,\n    fields: Object.entries(query.fields)\n      .map(([name, d]) => {\n        return wip_fields.includes(name) || d.primary_key\n          ? {\n              name: name,\n              caption: d.caption,\n              editable: d.editable,\n              edit: false,\n              criteria: [[]],\n              type: d.type,\n              display_on_card: true,\n            }\n          : null;\n      })\n      .filter((x) => {\n        return x != null;\n      }),\n  };\n  console.log(\"compute_outputs returning\", xyz);\n  return xyz;\n}\n","import Button from \"react-bootstrap/Button\";\nimport { useState } from \"react\";\n\nfunction Datacolumn(props) {\n  // const [data, setData] = useState(props.column_data);\n  const siblings = props.siblings;\n  const setter = props.setter;\n  const data = props.column_data;\n  const [numLocFields, setNumLocFields] = useState(\n    props.local_fields ? Object.keys(props.local_fields).length : 0,\n  );\n\n  const delete_field = (fieldName, fieldSet) => {\n    delete fieldSet[fieldName];\n    return fieldSet;\n  };\n  const save_caption = (fieldName, fieldCaption) => {\n    props.setter(\n      props.siblings.map((s) => {\n        return s.name == data.name\n          ? {\n              ...s,\n              local_fields: {\n                ...s.local_fields,\n                [fieldName]: {\n                  ...s.local_fields[fieldName],\n                  caption: fieldCaption,\n                },\n              },\n            }\n          : s;\n      }),\n    );\n  };\n\n  const save_type = (fieldName, fieldType) => {\n    props.setter(\n      props.siblings.map((s) => {\n        return s.name == data.name\n          ? {\n              ...s,\n              local_fields: {\n                ...s.local_fields,\n                [fieldName]: {\n                  ...s.local_fields[fieldName],\n                  edit_type: fieldType,\n                },\n              },\n            }\n          : s;\n      }),\n    );\n  };\n\n  return (\n    <div className=\"column\">\n      <label>\n        Column:\n        <input\n          key=\"column_name\"\n          value={data.caption}\n          onChange={(e) => {\n            //console.log(siblings);\n            let newsiblings = siblings.map((s) => {\n              return s.name == data.name\n                ? { ...data, caption: e.target.value }\n                : s;\n            });\n            //console.log(newsiblings);\n            setter(newsiblings);\n            //setter((siblings) => ({ ...data, caption: e.target.value }));\n          }}\n        ></input>\n      </label>\n\n      <div>\n        <table className=\"fieldTable\">\n          <thead>\n            <tr>\n              <th>Field</th>\n              {props.use_field ? <th>Display?</th> : \"\"}\n              {props.edit_field ? <th>Edit?</th> : \"\"}\n              <th>Criteria</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(data.fields).map(([, f]) => {\n              return (\n                <tr key={\"tr_\" + f.name}>\n                  <td>{f.caption}</td>\n                  {props.use_field ? (\n                    <td>\n                      <input\n                        key={data.name + \"_\" + f.name + \"_use\"}\n                        type=\"checkbox\"\n                        checked={f.display_on_card}\n                        onChange={(e) => {\n                          let newfields = Object.entries(data.fields).map(\n                            ([, d]) => {\n                              return d.name == f.name\n                                ? { ...f, display_on_card: e.target.checked }\n                                : d;\n                            },\n                          );\n                          let newsiblings = siblings.map((s) => {\n                            return s.name == data.name\n                              ? { ...data, fields: newfields }\n                              : s;\n                          });\n                          setter(newsiblings);\n                        }}\n                      />\n                    </td>\n                  ) : (\n                    \"\"\n                  )}\n\n                  {props.edit_field ? (\n                    <td>\n                      <input\n                        key={data.name + \"_\" + f.name + \"_edit\"}\n                        type=\"checkbox\"\n                        checked={f.edit ? 1 : 0}\n                        disabled={!f.editable || f.primary_key}\n                        onChange={(e) => {\n                          let newfields = Object.entries(data.fields).map(\n                            ([, d]) => {\n                              return d.name == f.name\n                                ? { ...f, edit: e.target.checked }\n                                : d;\n                            },\n                          );\n                          //console.log(newfields);\n                          let newsiblings = siblings.map((s) => {\n                            return s.name == data.name\n                              ? { ...data, fields: newfields }\n                              : s;\n                          });\n                          //console.log(newsiblings);\n                          setter(newsiblings);\n                          props.output_setter([]);\n                        }}\n                      />\n                    </td>\n                  ) : (\n                    \"\"\n                  )}\n                  {[...f.criteria, []].map((c, n) => {\n                    return (\n                      <td key={n}>\n                        <input\n                          onChange={(e) => {\n                            let newfields = null;\n                            if (n != Object.entries(f.criteria).length) {\n                              newfields = Object.entries(data.fields).map(\n                                ([, d]) => {\n                                  return d.name == f.name\n                                    ? {\n                                        ...f,\n                                        criteria: f.criteria.map((cc, k) => {\n                                          return k != n\n                                            ? cc\n                                            : [{ op: e.target.value }];\n                                        }),\n                                      }\n                                    : d;\n                                },\n                              );\n                            } else {\n                              console.log(\"got new criteria\");\n                              newfields = Object.entries(data.fields).map(\n                                ([, d]) => {\n                                  return {\n                                    ...d,\n                                    criteria: [\n                                      ...d.criteria,\n                                      d.name == f.name\n                                        ? [{ op: e.target.value }]\n                                        : \"\",\n                                    ],\n                                  };\n                                },\n                              );\n                            }\n\n                            console.log(\"n=\", n, newfields);\n                            let newsiblings = siblings.map((s) => {\n                              return s.name == data.name\n                                ? { ...data, fields: newfields }\n                                : s;\n                            });\n                            console.log(newsiblings);\n                            setter(newsiblings);\n                          }}\n                          value={c[0] ? c[0].op : \"\"}\n                          // disabled={!f.editable}\n                        ></input>\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n            <>\n              {props.local_fields ? (\n                <>\n                  <tr>\n                    <th className=\"break\" colSpan={3}></th>\n                  </tr>\n                  <tr>\n                    <th colSpan={3} className=\"local_fields\">\n                      <h5>\n                        <b>Pipeline-only fields (not saved to PITS)</b>\n                      </h5>\n                    </th>\n                  </tr>\n\n                  <tr>\n                    <th>Field</th>\n\n                    <th>Field Type</th>\n                    <th></th>\n                  </tr>\n                  {Object.entries(props.local_fields).map(([n, f]) => (\n                    <tr key={n}>\n                      <td>\n                        <input\n                          value={f.caption}\n                          className=\"local_field_input\"\n                          placeholder=\"Field Name\"\n                          onChange={(e) => {\n                            save_caption(f.name, e.target.value);\n                          }}\n                        ></input>\n                      </td>\n                      <td>\n                        <select\n                          value={f.edit_type}\n                          onChange={(e) => save_type(f.name, e.target.value)}\n                        >\n                          <option value=\"string\">Short text or Number</option>\n                          <option value=\"textarea\">Long text</option>\n                          <option value=\"select_yesno\">Yes/No</option>\n                        </select>\n                      </td>\n                      <td>\n                        <Button\n                          variant=\"warning\"\n                          size=\"sm\"\n                          onClick={() => {\n                            props.setter(\n                              props.siblings.map((s) => {\n                                return s.name == data.name\n                                  ? {\n                                      ...s,\n                                      local_fields: delete_field(\n                                        f.name,\n                                        s.local_fields,\n                                      ),\n                                    }\n                                  : s;\n                              }),\n                            );\n                          }}\n                        >\n                          Delete\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                  <tr>\n                    <td colSpan={3} className=\"local_fields_add_button\">\n                      <Button\n                        onClick={() => {\n                          console.log(\n                            \"add field\",\n                            \"local_fields\",\n                            props.local_fields,\n                            \"siblings\",\n                            props.siblings,\n                            \"column name\",\n                            data.name,\n                          );\n                          let newsibligns = props.siblings.map((s) => {\n                            return s.name == data.name\n                              ? {\n                                  ...s,\n                                  local_fields: {\n                                    ...s.local_fields,\n                                    [\"local_field\" + numLocFields]: {\n                                      caption: \"\",\n                                      edit_type: \"string\",\n                                      name: \"local_field\" + numLocFields,\n                                      editable: true,\n                                      edit: true,\n                                    },\n                                  },\n                                }\n                              : s;\n                          });\n                          setNumLocFields((n) => n + 1);\n                          console.log(\n                            \"siblings\",\n                            props.siblings,\n                            \"newsibligs\",\n                            newsibligns,\n                          );\n                          props.setter(\n                            props.siblings.map((s) => {\n                              return s.name == data.name\n                                ? {\n                                    ...s,\n                                    local_fields: {\n                                      ...s.local_fields,\n                                      [\"local_field\" +\n                                      numLocFields +\n                                      Object.entries(props.local_fields)\n                                        .length]: {\n                                        caption: \"\",\n                                        type: \"string\",\n                                        name:\n                                          \"local_field\" +\n                                          numLocFields +\n                                          Object.entries(props.local_fields)\n                                            .length,\n                                        editable: true,\n                                        edit: true,\n                                      },\n                                    },\n                                  }\n                                : s;\n                            }),\n                          );\n                        }}\n                      >\n                        Add Field\n                      </Button>\n                    </td>\n                  </tr>\n                </>\n              ) : null}\n            </>\n          </tbody>\n        </table>\n        {props.remove_button ? (\n          <Button\n            onClick={() => {\n              let newsiblings = siblings.filter((s) => {\n                if (props.keep_column) {\n                  console.log(\n                    \"Datacolumn:\",\n                    \"s.name=\",\n                    s.name,\n                    \"keep_column=\",\n                    props.keep_column,\n                  );\n                  return s.name != data.name || s.name == props.keep_column;\n                } else {\n                  return s.name != data.name;\n                }\n              });\n              setter(newsiblings);\n            }}\n          >\n            Delete Column\n          </Button>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n//\nexport default Datacolumn;\n","import \"./styles.css\";\nimport { useState, useContext } from \"react\";\nimport { LoginContext } from \"../App\";\n\nimport {\n  compute_wips,\n  compute_inputs,\n  compute_outputs,\n} from \"./column_helpers.js\";\n\nimport Datacolumn from \"./Datacolumn.js\";\nimport { Breadcrumb } from \"react-bootstrap\";\n\n//import Select from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { useParams } from \"react-router-dom\";\n//import { Routes, Route } from 'react-router-dom';\n\nexport default function PipelineEditor(props) {\n  let target_pipeline = null;\n\n  const token = useContext(LoginContext);\n\n  //const [pipeline_data, setPipelineData] = useState(get_pipeline_data());\n\n  const [data_sources, set_data_sources] = useState([]);\n  const [data_source, setDataSource] = useState(null);\n\n  const [inputs, setInputs] = useState([]);\n  const [query, setQuery] = useState({});\n  const [wips, setWIPS] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const [outputs, setOutputs] = useState([\n    // compute_outputs(query, wips, \"output\", \"Output Column\"),\n  ]);\n  const [selectOptions, setSelectOptions] = useState([]);\n  const [pipeline_data, setPipelineData] = useState(null);\n\n  let pipelineName = null;\n  let setPipelineName = null;\n\n  if (props.pipeline != \"new\") {\n    let params = useParams();\n    target_pipeline = params.pipelineName;\n    //pipeline_data = get_pipeline_data().find((x) => x.name == target_pipeline);\n\n    [pipelineName, setPipelineName] = useState(target_pipeline); // pipelineID\n  } else {\n    target_pipeline = \"Pipeline\";\n    //pipeline_data = get_pipeline_data()[0];\n    [pipelineName, setPipelineName] = useState(\"\"); // pipelineID\n  }\n\n  const [pipeline, setPipeline] = useState(target_pipeline);\n\n  const load_query_data = () => {\n    const url =\n      \"https://docs.ipam.ucla.edu/cocytus/get_data_sources.php?ipam_id=\" +\n      token.ipam_id +\n      \"&session_token=\" +\n      token.session_token;\n    const headers = {};\n    //const headers = { authorization: \"Basic \" + token };\n    fetch(url, { mode: \"cors\", headers: headers, method: \"GET\" }).then(\n      (response) => {\n        response.json().then((data) => {\n          console.log(\"pipeline_editor: got data\", data);\n          let new_pipeline_data = null;\n          if (props.pipeline != \"new\") {\n            new_pipeline_data = data.pipelines.find(\n              (x) => x.name == target_pipeline,\n            );\n\n            console.log(\n              \"pipeine editor: new_pipeline_data\",\n              new_pipeline_data,\n              \"data.pipelines\",\n              data.pipelines,\n              \"looking for \",\n              target_pipeline,\n            );\n          } else {\n            new_pipeline_data = {\n              name: \"new\",\n              caption: \"New Pipeline\",\n              data_source: data.data_sources[0].name,\n              query: data.data_sources[0].available_queries[0].name,\n              inputs: compute_inputs(data.data_sources[0].available_queries[0]),\n              local_fields: data.local_fields ? data.local_fields : [],\n            };\n          }\n\n          setPipelineData(new_pipeline_data);\n\n          set_data_sources(data.data_sources);\n\n          let new_data_source = data.data_sources.find(\n            (x) => x.name == new_pipeline_data.data_source,\n          );\n          console.log(\"new_data_source\", new_data_source, \"loaded=\", loaded);\n          setDataSource(new_data_source);\n          setQuery(\n            new_data_source.available_queries.find(\n              (x) => x.name == new_pipeline_data.inputs[0].query,\n            ),\n          );\n          setSelectOptions(\n            new_data_source.available_queries.map((q) => {\n              return { value: q.name, label: q.caption };\n            }),\n          );\n          setInputs(new_pipeline_data.inputs);\n          if (props.pipeline != \"new\") {\n            setWIPS(new_pipeline_data.wips);\n            setOutputs(new_pipeline_data.outputs);\n            setPipeline(new_pipeline_data.caption);\n          } else {\n            setPipeline(\"\");\n            setWIPS([]);\n            setOutputs([]);\n          }\n          setLoaded(true);\n        });\n      },\n    );\n  };\n\n  if (!loaded) {\n    load_query_data();\n  }\n\n  /* console.log(\n    \"done with setup\",\n    \"target_pipeline\",\n    target_pipeline,\n    \"pipeline_data\",\n    pipeline_data,\n    \"data_sources\",\n    data_sources,\n    \"data_source\",\n    data_source,\n    \"inputs\",\n    inputs,\n    \"query\",\n    query,\n    \"wips\",\n    wips,\n    \"outputs\",\n    outputs,\n    \"selectOptions\",\n    selectOptions,\n    \"pipeline\",\n    pipeline,\n    \"loaded\",\n    loaded,\n    \"pipelineName\",\n    pipelineName,\n  ); */\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <Breadcrumb className=\"Breadcrumb\">\n          <Breadcrumb.Item href=\"/malebolge/\">Home</Breadcrumb.Item>\n          <Breadcrumb.Item active>Editing pipeline: {pipeline}</Breadcrumb.Item>\n        </Breadcrumb>\n      </nav>\n      <h1>Pipeline Editor</h1>\n      {data_source && pipeline_data ? (\n        <>\n          <label className=\"pipelineName\">\n            Pipeline name:\n            <Form.Control\n              type=\"text\"\n              value={pipeline}\n              onChange={(e) => {\n                setPipeline(e.target.value);\n                setPipelineName(encodeURIComponent(e.target.value));\n                //setPipelineName(e.target.value.split(\" \").join(\"_\"));\n              }}\n            />\n          </label>\n          <div className=\"preamble\">\n            <label>\n              Datasource:\n              <Form.Select\n                className=\"data_selector\"\n                defaultValue={data_source.name}\n                onChange={(ev) => {\n                  let val = ev.target.value;\n                  let new_data_source = data_sources.filter((ds) => {\n                    return ds.name == val;\n                  })[0];\n                  setDataSource(new_data_source);\n                  setInputs(\n                    compute_inputs(new_data_source.available_queries[0]),\n                  );\n                  setWIPS([]);\n                  setOutputs([]);\n                  setSelectOptions(\n                    new_data_source.available_queries.map((q) => {\n                      return { value: q.name, label: q.caption };\n                    }),\n                  );\n                }}\n              >\n                {data_sources.map((ds) => {\n                  return (\n                    <option key={ds.name} value={ds.name}>\n                      {ds.caption}\n                    </option>\n                  );\n                })}\n              </Form.Select>\n            </label>\n            <label>\n              Query:\n              <Form.Select\n                className=\"data_selector\"\n                //value={selectOptions[0]}\n                defaultValue={\n                  //(pipeline_data.inputs[0].query)\n                  query.name\n                  /*label: data_source.available_queries.find(\n                (q) => q.name == pipeline_data.inputs[0].query,\n              ).caption,*/\n                }\n                onChange={(e) => {\n                  let val = e.target.value;\n                  let newquery = data_source.available_queries.filter((qn) => {\n                    return qn.name == val;\n                  })[0];\n                  setQuery(newquery);\n                  setInputs(compute_inputs(newquery));\n                  setWIPS([]);\n                  setOutputs([\n                    //compute_outputs(newquery, [], \"output\", \"Output Column\"),\n                  ]);\n                }}\n              >\n                {console.log(query)}\n                {selectOptions.map((q) => {\n                  return (\n                    <option key={q.value} value={q.value}>\n                      {q.label}\n                    </option>\n                  );\n                })}\n              </Form.Select>\n            </label>\n          </div>\n          <table className=\"columntable\">\n            <thead>\n              <tr>\n                <th>\n                  <h2>Inputs</h2>\n                  <h4>New cards appear here</h4>\n                </th>\n                <th>\n                  <h2>\n                    To-Do&apos;s{\" \"}\n                    <Button\n                      onClick={() => {\n                        setWIPS([\n                          ...wips,\n                          compute_wips(query, \"wip\" + wips.length + 1, \"\"),\n                        ]);\n                      }}\n                    >\n                      Add Column\n                    </Button>\n                  </h2>\n                  <h4>Cards you are working on appear here</h4>\n                </th>\n                <th>\n                  <h2>\n                    Done{\" \"}\n                    <Button\n                      onClick={() => {\n                        setOutputs([\n                          ...outputs,\n                          compute_outputs(\n                            query,\n                            wips,\n                            \"outputs\" + outputs.length + 1,\n                            \"\",\n                          ),\n                        ]);\n                      }}\n                    >\n                      Add Column\n                    </Button>\n                  </h2>\n                  <h4>All cards should end up here</h4>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <div className=\"columnset\">\n                    <Datacolumn\n                      column_data={inputs[0]}\n                      local_fields={\n                        inputs[0].local_fields ? inputs[0].local_fields : {}\n                      }\n                      siblings={inputs}\n                      setter={setInputs}\n                      key=\"inputs\"\n                      use_field={true}\n                      edit_field={false}\n                    />\n                  </div>\n                </td>\n                <td>\n                  <div className=\"columnset\">\n                    {wips.map((w) => {\n                      return (\n                        <Datacolumn\n                          column_data={{\n                            ...w,\n                            fields: w.fields,\n                          }}\n                          siblings={wips}\n                          setter={setWIPS}\n                          remove_button\n                          key={w.name}\n                          output_setter={setOutputs}\n                          use_field={false}\n                          edit_field={true}\n                        />\n                      );\n                    })}\n                  </div>\n                </td>\n                <td>\n                  <div className=\"columnset\">\n                    {outputs.map((o) => {\n                      return (\n                        <Datacolumn\n                          column_data={o}\n                          siblings={outputs}\n                          remove_button\n                          //keep_column={\"output\"}\n                          setter={setOutputs}\n                          key={o.name}\n                          use_field={false}\n                          edit_field={false}\n                        />\n                      );\n                    })}\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <hr />\n          <Button\n            disabled={outputs.length == 0 || pipeline == \"\"}\n            onClick={() => {\n              let save_data = {\n                data_source: data_source.name,\n                query: query.name,\n                name: pipelineName,\n                caption: pipeline,\n                inputs: inputs,\n                wips: wips,\n                outputs: outputs,\n                local_fields: pipeline_data.local_fields,\n              };\n              const headers = {\n                //  authorization: \"Basic \" + token,\n                \"Content-Type\": \"application/json\",\n              };\n              const url =\n                \"https://docs.ipam.ucla.edu/cocytus/save_pipeline.php?ipam_id=\" +\n                token.ipam_id +\n                \"&session_token=\" +\n                token.session_token;\n              const body = JSON.stringify(save_data);\n\n              console.log(\n                \"saving pipline before fetch url=\",\n                url,\n                \"body=\",\n                body,\n                \"headers=\",\n                headers,\n              );\n              fetch(url, {\n                headers: headers,\n                body: body,\n                mode: \"cors\",\n                method: \"POST\",\n              }).then((response) => {\n                response.text().then((text) => {\n                  //console.log(\"Saving pipline. Got response: \" + text);\n                  alert(\"Saved. Got response: \" + text);\n                });\n              });\n              //console.log(JSON.stringify(save_data));\n            }}\n          >\n            Save\n          </Button>\n          <hr />\n        </>\n      ) : (\n        <div>Loading data sources...</div>\n      )}\n    </div>\n  );\n}\n"],"names":["compute_inputs","query","name","caption","fields","Object","entries","map","_ref","d","editable","primary_key","edit_type","edit","criteria","display_on_card","type","compute_wips","column_name","column_caption","_ref2","compute_outputs","wips","wip_fields","Set","w","flat","filter","f","ff","console","log","xyz","_ref3","includes","x","props","siblings","setter","data","column_data","numLocFields","setNumLocFields","useState","local_fields","keys","length","_jsxs","className","children","_jsx","value","onChange","e","newsiblings","s","target","use_field","edit_field","checked","newfields","disabled","output_setter","c","n","_ref4","cc","k","op","_ref5","_Fragment","colSpan","_ref6","placeholder","save_caption","fieldName","fieldCaption","save_type","fieldType","Button","variant","size","onClick","fieldSet","delete_field","newsibligns","remove_button","keep_column","PipelineEditor","target_pipeline","token","useContext","LoginContext","data_sources","set_data_sources","data_source","setDataSource","inputs","setInputs","setQuery","setWIPS","loaded","setLoaded","outputs","setOutputs","selectOptions","setSelectOptions","pipeline_data","setPipelineData","pipelineName","setPipelineName","pipeline","params","useParams","setPipeline","load_query_data","url","ipam_id","session_token","fetch","mode","headers","method","then","response","json","new_pipeline_data","pipelines","find","available_queries","new_data_source","q","label","Breadcrumb","Item","href","active","Form","Control","encodeURIComponent","Select","defaultValue","ev","val","ds","newquery","qn","Datacolumn","o","save_data","body","JSON","stringify","text","alert"],"sourceRoot":""}